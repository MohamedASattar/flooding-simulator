## @file  BLE_Beacon.py
import gc
## @cond DOXYGEN_SHOULD_SKIP_THIS

# Set to 1 for enabling Flags AD Type position at the beginning of the advertising packet 
ENABLE_FLAGS_AD_TYPE_AT_BEGINNING = 1
# Define the beacon0 payload to be used within the advertising data
beacon0 = [0x4C, 0x00, 0x02, 0x15, 0xE0, 0x0A, 0x39, 0xF4, 0x73, 0xF5, 0x4B, 0xC4, 0xA1, 0x2F, 0x17, 0xD1, 0xAD, 0x07, 0xA9, 0x61]
beacon1 = [0x4C, 0x00, 0x02, 0x15, 0xE1, 0x0A, 0x39, 0xF4, 0x73, 0xF5, 0x4B, 0xC4, 0xA1, 0x2F, 0x17, 0xD1, 0xAD, 0x07, 0xA9, 0x61]
beacon2 = [0x4C, 0x00, 0x02, 0x15, 0xE2, 0x0A, 0x39, 0xF4, 0x73, 0xF5, 0x4B, 0xC4, 0xA1, 0x2F, 0x17, 0xD1, 0xAD, 0x07, 0xA9, 0x61]
beacon3 = [0x4C, 0x00, 0x02, 0x15, 0xE3, 0x0A, 0x39, 0xF4, 0x73, 0xF5, 0x4B, 0xC4, 0xA1, 0x2F, 0x17, 0xD1, 0xAD, 0x07, 0xA9, 0x61]
beacon4 = [0x4C, 0x00, 0x02, 0x15, 0xE4, 0x0A, 0x39, 0xF4, 0x73, 0xF5, 0x4B, 0xC4, 0xA1, 0x2F, 0x17, 0xD1, 0xAD, 0x07, 0xA9, 0x61]
beacon5 = [0x4C, 0x00, 0x02, 0x15, 0xE5, 0x0A, 0x39, 0xF4, 0x73, 0xF5, 0x4B, 0xC4, 0xA1, 0x2F, 0x17, 0xD1, 0xAD, 0x07, 0xA9, 0x61]
beacon6 = [0x4C, 0x00, 0x02, 0x15, 0xE6, 0x0A, 0x39, 0xF4, 0x73, 0xF5, 0x4B, 0xC4, 0xA1, 0x2F, 0x17, 0xD1, 0xAD, 0x07, 0xA9, 0x61]
beacon7 = [0x4C, 0x00, 0x02, 0x15, 0xE7, 0x0A, 0x39, 0xF4, 0x73, 0xF5, 0x4B, 0xC4, 0xA1, 0x2F, 0x17, 0xD1, 0xAD, 0x07, 0xA9, 0x61]
beacon8 = [0x4C, 0x00, 0x02, 0x15, 0xE8, 0x0A, 0x39, 0xF4, 0x73, 0xF5, 0x4B, 0xC4, 0xA1, 0x2F, 0x17, 0xD1, 0xAD, 0x07, 0xA9, 0x61]
beacon9 = [0x4C, 0x00, 0x02, 0x15, 0xE9, 0x0A, 0x39, 0xF4, 0x73, 0xF5, 0x4B, 0xC4, 0xA1, 0x2F, 0x17, 0xD1, 0xAD, 0x07, 0xA9, 0x61]
data = []
counter = 0
CounTimer = 1
Prev_time = TIME()
timestamp1 = GET_LIST(int(TIME()),4)
timestamp2 = timestamp1
timestamp3 = timestamp1
timestamp4 = timestamp1
timestamp5 = timestamp1
def StrtBeacon(MACAdd,beaconData):
	global data
	try:
		gc.collect()
		try:
			RESET()
			WAIT_EVENT(HCI_VENDOR_EVENT, timeout=0.1, Ecode=ACI_BLUE_INITIALIZED_EVENT)
		except:
			PRINT('RESET ERROR')
			return
		status = SET_PUBLIC_ADDRESS(MACAdd)
		if status !=0x00:
			PRINT('SET_PUBLIC_ADDRESS FAILED')
		if  ACI_GATT_INIT()!=0x00:
			PRINT('ACI_GATT_INIT FAILED')
		status,_,_,_=  ACI_GAP_INIT(Role=PERIPHERAL)
		if status !=0x00:
			PRINT('ACI_GAP_INIT CALL FAILED')
		status = ACI_HAL_SET_TX_POWER_LEVEL(En_High_Power=1,PA_Level = 4) 
		if status !=0x00:
			PRINT('ACI_GAP_INIT CALL FAILED')
		status = ACI_GAP_SET_DISCOVERABLE(Advertising_Type=0x03, Advertising_Interval_Min=160, Advertising_Interval_Max=160, Local_Name_Length = 0x0, Local_Name = 0x0)
		if status !=0x00:
			PRINT('ACI_GAP_SET_DISCOVERABLE CALL FAILED')
		data = [len(beaconData + [ 0xC8 ])+1  , 0xFF ] + beaconData + [ 0xC8 ] 
		PRINT(data)
		status = HCI_LE_SET_ADVERTISING_DATA(Advertising_Data_Length=len(data) + 3, Advertising_Data= [0x02,0x01,0x06] + data)
		if status !=0x00:
			PRINT('HCI_LE_SET_ADVERTISING_DATA ERROR')
	except:
		PRINT(sys.exc_info()[0])
while (True):
	if ((TIME() > Prev_time + 300)):
		timestamp1 = GET_LIST(int(TIME()),4)
		if CounTimer%2 == 0:
			timestamp2 = GET_LIST(int(TIME()),4)
		if CounTimer%3 == 0:
			timestamp3 = GET_LIST(int(TIME()),4)
		if CounTimer%4 == 0:
			timestamp4 = GET_LIST(int(TIME()),4)
		CounTimer = ((CounTimer + 1) % 12) + 1
		Prev_time = TIME()
	else :
		SLEEP(0.2)
		if counter == 0:
			StrtBeacon(0xD106B8047C53, beacon0 + timestamp1)
		elif counter == 1:
			StrtBeacon(0xD77101413239, beacon1 + timestamp1)
		elif counter == 2:
			StrtBeacon(0xC58041600E0C,beacon2 + timestamp1)
		elif counter == 3:
			StrtBeacon(0x0017C538E589,beacon3 + timestamp4)
		elif counter == 4:
			StrtBeacon(0x0117C538E582,beacon4 + timestamp2)
		elif counter == 5:
			StrtBeacon(0x0117C53F287A,beacon5 + timestamp2)
		elif counter == 6:
			StrtBeacon(0x994E4ED086EE,beacon6 + timestamp4)
		elif counter == 7:
			StrtBeacon(0x778041600ECC,beacon7 + timestamp3)
		elif counter == 8:
			StrtBeacon(0x447B0EE8E3FC,beacon8 + timestamp3)
		else :
			StrtBeacon(0x88D192DFCA77,beacon9 + timestamp3)
			counter = -1
		counter += 1
